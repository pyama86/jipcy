package handler

import (
	"fmt"
	"log/slog"
	"os"
	"strings"
	"time"

	"github.com/andygrunwald/go-jira"
	"github.com/pyama86/jipcy/domain/infra"
	"github.com/pyama86/jipcy/domain/service"
	"github.com/slack-go/slack"
	"github.com/slack-go/slack/slackevents"
	"github.com/slack-go/slack/socketmode"
	"github.com/songmu/retry"
)

type Handler struct {
	slack       *infra.Slack
	jira        *infra.Jira
	openAI      *infra.OpenAI
	slackClient *slack.Client
	botID       string
}

func NewHandler(slack *infra.Slack, jira *infra.Jira, openAI *infra.OpenAI) *Handler {
	return &Handler{
		slack:  slack,
		jira:   jira,
		openAI: openAI,
	}
}

func (h *Handler) Handle() error {
	webApi := slack.New(
		os.Getenv("SLACK_BOT_TOKEN"),
		slack.OptionAppLevelToken(os.Getenv("SLACK_APP_TOKEN")),
	)
	socketMode := socketmode.New(
		webApi,
	)
	authTest, authTestErr := webApi.AuthTest()
	if authTestErr != nil {
		fmt.Fprintf(os.Stderr, "SLACK_BOT_TOKEN is invalid: %v\n", authTestErr)
		os.Exit(1)
	}
	h.botID = authTest.UserID
	h.slackClient = webApi
	go func() {
		for envelope := range socketMode.Events {
			switch envelope.Type {
			case socketmode.EventTypeEventsAPI:
				socketMode.Ack(*envelope.Request)
				eventPayload, ok := envelope.Data.(slackevents.EventsAPIEvent)
				if !ok {
					slog.Error("Failed to cast to EventsAPIEvent")
					continue
				}

				switch eventPayload.Type {
				case slackevents.CallbackEvent:
					innerEvent := eventPayload.InnerEvent
					switch ev := innerEvent.Data.(type) {
					case *slackevents.AppMentionEvent:
						h.handleMention(ev)
					default:
						socketMode.Debugf("Skipped: %v", envelope.Type)
					}
				}
			}
		}
	}()

	return socketMode.Run()
}

// „Ç®„É©„ÉºÂÜÖÂÆπ„Çí„Éù„Çπ„Éà„Åô„ÇãÈñ¢Êï∞
func (h *Handler) postError(channelID, userID, message, ts string) {
	blocks := []slack.Block{
		slack.NewHeaderBlock(
			slack.NewTextBlockObject("plain_text", "‚ùå „Ç®„É©„Éº", false, false),
		),
		slack.NewDividerBlock(),
		slack.NewSectionBlock(
			slack.NewTextBlockObject("mrkdwn", message, false, false),
			nil, nil,
		),
	}
	if _, err := h.slackClient.PostEphemeral(
		channelID,
		userID,
		slack.MsgOptionBlocks(blocks...),
		slack.MsgOptionTS(ts),
	); err != nil {
		slog.Error("Failed to post message", slog.Any("err", err))
	}
}

// „É°„É≥„Ç∑„Éß„É≥„ÇíÂèó„ÅëÂèñ„Å£„Åü„Å®„Åç„ÅÆÂá¶ÁêÜ
func (h *Handler) handleMention(event *slackevents.AppMentionEvent) {
	channelID := event.Channel
	userID := event.User

	// „Éú„ÉÉ„ÉàËá™Ë∫´„ÅÆ„É°„É≥„Ç∑„Éß„É≥ (`@bot`) „ÇíÂâäÈô§
	messageText := strings.Replace(event.Text, fmt.Sprintf("<@%s>", h.botID), "", 1)
	messageText = strings.TrimSpace(messageText)

	if messageText == "" {
		h.postError(channelID, userID, "„É°„ÉÉ„Çª„Éº„Ç∏„ÅåÁ©∫„Åß„Åô„ÄÇÂÖ•ÂäõÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ", event.TimeStamp)
		return
	}

	// Áí∞Â¢ÉÂ§âÊï∞ SLACK_CHANNEL „ÅßÊåáÂÆö„Åï„Çå„Åü„ÉÅ„É£„É≥„Éç„É´‰ª•Â§ñ„ÅØÂøúÁ≠î„Åó„Å™„ÅÑ
	if os.Getenv("SLACK_CHANNEL") != "" {
		allowedChannel := strings.TrimPrefix(os.Getenv("SLACK_CHANNEL"), "#")
		channelInfo, err := h.slack.GetChannelInfo(channelID)
		if err != nil {
			slog.Error("Failed to get channel info", slog.Any("err", err))
			return
		}

		if channelInfo.Name != allowedChannel {
			h.postError(channelID, userID, "„Åì„ÅÆ„ÉÅ„É£„É≥„Éç„É´„Åß„ÅØÂøúÁ≠î„Åó„Åæ„Åõ„Çì„ÄÇ", event.TimeStamp)
			return
		}
		slog.Info("Allowed channel", slog.String("channel", channelInfo.Name))
	}

	var lastError error
	// ËôöÁÑ°„Å´Ë©±„Åó„Åã„Åë„Å¶„Çã„Åø„Åü„ÅÑ„Å´„Å™„Çã„ÅÆ„Åß„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂøúÁ≠î„Åô„Çã
	if _, _, err := h.slackClient.PostMessage(
		channelID,
		slack.MsgOptionText(":white_check_mark: *„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åó„ÅüÔºÅ*\n‰ª•Èôç„ÅØ„ÅÇ„Å™„Åü„Å†„Åë„Å´Ëøî‰ø°„Åó„Åæ„Åô„ÄÇ:sparkles:", false),
		slack.MsgOptionTS(event.TimeStamp),
	); err != nil {
		slog.Error("Failed to post message", slog.Any("err", err))
		return
	}

	// 1. Âá¶ÁêÜÈñãÂßã„ÅÆÈÄöÁü•
	{
		blocks := []slack.Block{
			slack.NewHeaderBlock(
				slack.NewTextBlockObject("plain_text", "üöÄ JiraÂïè„ÅÑÂêà„Çè„ÅõÈñãÂßã", false, false),
			),
			slack.NewDividerBlock(),
			slack.NewSectionBlock(
				slack.NewTextBlockObject("mrkdwn", "JiraÂïè„ÅÑÂêà„Çè„Åõ„ÇíÈñãÂßã„Åó„Åæ„Åô„ÄÇ", false, false),
				nil, nil,
			),
		}
		if _, err := h.slackClient.PostEphemeral(
			channelID,
			userID,
			slack.MsgOptionBlocks(blocks...),
			slack.MsgOptionTS(event.TimeStamp),
		); err != nil {
			slog.Error("Failed to post message", slog.Any("err", err))
			return
		}
	}
	var issues []jira.Issue
	// 2. JiraÊ§úÁ¥¢„ÇØ„Ç®„É™„ÅÆÁîüÊàê
	err := retry.Retry(5, 1*time.Second, func() error {
		jiraQuery, err := h.openAI.GenerateJiraQuery(messageText, lastError)
		if err != nil {
			slog.Error("Failed to generate Jira query", slog.Any("err", err))
			return err
		}

		// 3. ÁîüÊàê„Åó„ÅüJiraÊ§úÁ¥¢„ÇØ„Ç®„É™„ÅÆÈÄöÁü•
		{
			blocks := []slack.Block{
				slack.NewHeaderBlock(
					slack.NewTextBlockObject("plain_text", "üîç JiraÊ§úÁ¥¢„ÇØ„Ç®„É™", false, false),
				),
				slack.NewDividerBlock(),
				slack.NewSectionBlock(
					slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("`%s`", jiraQuery), false, false),
					nil, nil,
				),
			}
			if _, err := h.slackClient.PostEphemeral(
				channelID,
				userID,
				slack.MsgOptionBlocks(blocks...),
				slack.MsgOptionTS(event.TimeStamp),
			); err != nil {
				slog.Error("Failed to post message", slog.Any("err", err))
				return err
			}
		}

		// 4. Jira API„ÅßÂïè„ÅÑÂêà„Çè„Åõ„ÇíÊ§úÁ¥¢
		is, err := h.jira.FetchIssues(jiraQuery)
		if err != nil {
			slog.Error("Failed to fetch Jira issues", slog.Any("err", err))
			lastError = err
			return err
		}
		issues = is
		return nil
	})
	if err != nil {
		slog.Error("Failed to generate Jira query", slog.Any("err", err))
		h.postError(channelID, userID, "JiraÂïè„ÅÑÂêà„Çè„Åõ„ÅÆÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ", event.TimeStamp)
		return
	}

	if len(issues) == 0 {
		if _, err := h.slackClient.PostEphemeral(
			channelID,
			userID,
			slack.MsgOptionText(":white_check_mark: *JiraÂïè„ÅÑÂêà„Çè„ÅõÁµêÊûú*\nË©≤ÂΩì„Åô„ÇãÂïè„ÅÑÂêà„Çè„Åõ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ", false),
			slack.MsgOptionTS(event.TimeStamp),
		); err != nil {
			slog.Error("Failed to post message", slog.Any("err", err))
			return
		}
		return
	}

	// 5. JiraÂïè„ÅÑÂêà„Çè„ÅõÁµêÊûú„ÅÆÈÄöÁü•
	{
		blocks := []slack.Block{
			slack.NewHeaderBlock(
				slack.NewTextBlockObject("plain_text", "üìä JiraÂïè„ÅÑÂêà„Çè„ÅõÁµêÊûú", false, false),
			),
			slack.NewDividerBlock(),
			slack.NewSectionBlock(
				slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("JiraÂïè„ÅÑÂêà„Çè„ÅõÁµêÊûú: %d‰ª∂„Åß„Åô„ÄÇËß£Êûê„ÇíÈñãÂßã„Åó„Åæ„Åô„ÄÇ„Åó„Å∞„Çâ„Åè„ÅäÂæÖ„Å°‰∏ã„Åï„ÅÑ„ÄÇ", len(issues)), false, false),
				nil, nil,
			),
		}
		if _, err := h.slackClient.PostEphemeral(
			channelID,
			userID,
			slack.MsgOptionBlocks(blocks...),
			slack.MsgOptionTS(event.TimeStamp),
		); err != nil {
			slog.Error("Failed to post message", slog.Any("err", err))
			return
		}
	}

	svc := service.NewSelectTopIssueService(h.openAI, h.slack, h.jira)
	// 6. Jira„ÅÆÂïè„ÅÑÂêà„Çè„Åõ„Åã„ÇâÊúÄ„ÇÇÈ°û‰ºº„Åó„Å¶„ÅÑ„Çã3‰ª∂„ÇíÈÅ∏Êäû
	selectedIssues, err := svc.SelectTopIssues(messageText, issues, channelID)
	if err != nil {
		slog.Error("Failed to select top issues", slog.Any("err", err))
		h.postError(channelID, userID, "JiraÂïè„ÅÑÂêà„Çè„Åõ„ÅÆÈÅ∏Êäû„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ", event.TimeStamp)
		return
	}

	if len(selectedIssues) == 0 {
		if _, err := h.slackClient.PostEphemeral(
			channelID,
			userID,
			slack.MsgOptionText(":white_check_mark: *JiraÂïè„ÅÑÂêà„Çè„ÅõÁµêÊûú*\nÈ°û‰ººÂ∫¶„ÅÆÈ´ò„ÅÑÂïè„ÅÑÂêà„Çè„Åõ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ", false),
			slack.MsgOptionTS(event.TimeStamp),
		); err != nil {
			slog.Error("Failed to post message", slog.Any("err", err))
			return
		}
		return
	}

	// 7. Ë¶ÅÁ¥ÑÁîüÊàê„ÅÆÂÆüË°å
	if err := h.openAI.GenerateSummary(selectedIssues); err != nil {
		slog.Error("Failed to generate summary", slog.Any("err", err))
		h.postError(channelID, userID, "JiraÂïè„ÅÑÂêà„Çè„Åõ„ÅÆË¶ÅÁ¥ÑÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ", event.TimeStamp)
		return
	}

	for _, issue := range selectedIssues {
		blocks := []slack.Block{
			// „Éò„ÉÉ„ÉÄ„Éº
			slack.NewHeaderBlock(
				slack.NewTextBlockObject("plain_text", "üìù Jira Issue", false, false),
			),
			slack.NewDividerBlock(),
			// Jira ID
			slack.NewSectionBlock(
				slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*üîñ Jira ID:* %s", issue.ID), false, false),
				nil, nil,
			),
			// JIRA URL
			slack.NewSectionBlock(
				slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*üîó JIRA URL:* %s", issue.URL), false, false),
				nil, nil,
			),
			// Slack URL
			slack.NewSectionBlock(
				slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*üîó Slack URL:* %s", issue.SlackThreadURL), false, false),
				nil, nil,
			),
			// È°û‰ººÂ∫¶
			slack.NewSectionBlock(
				slack.NewTextBlockObject("mrkdwn", fmt.Sprintf("*üìä È°û‰ººÂ∫¶:* %.2f", issue.Similarity), false, false),
				nil, nil,
			),
			// „Çµ„Éû„É™Ë¶ãÂá∫„Åó
			slack.NewSectionBlock(
				slack.NewTextBlockObject("mrkdwn", "*üìù „Çµ„Éû„É™:*", false, false),
				nil, nil,
			),
			// „Çµ„Éû„É™„ÅÆÊú¨ÊñáÔºà„Éú„ÉÉ„ÇØ„ÇπË°®Á§∫Ôºâ
			slack.NewSectionBlock(
				slack.NewTextBlockObject("mrkdwn", fmt.Sprintf(">>> %s", issue.GeneratedSummary), false, false),
				nil, nil,
			),
			slack.NewDividerBlock(),
		}
		if _, err := h.slackClient.PostEphemeral(
			channelID,
			userID,
			slack.MsgOptionBlocks(blocks...),
			slack.MsgOptionTS(event.TimeStamp),
		); err != nil {
			slog.Error("Failed to post message", slog.Any("err", err))
		}
	}
}
